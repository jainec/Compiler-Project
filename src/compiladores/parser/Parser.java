/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladores.parser;

import compiladores.lexer.*;
import compiladores.node.*;
import compiladores.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAcomando11Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAcomando21Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAtipodeclaracoes1Declaracoes */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAtipodeclaracoes2Declaracoes */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AConstDeclaracoes */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAdeclaracao1Declaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAdeclaracao2Declaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AIntTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce ACharTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce ABooleanoTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AVarList */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AIdVar */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce AIndexVar */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AStrValor */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce ANumValor */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce ANumrealValor */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AComandoListComandoList */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AAtribComandos */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list);
            }
            break;
            case 19: /* reduce AAleiacomandos1Comandos */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce AAleiacomandos2Comandos */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AAescrevacomandos1Comandos */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce AAescrevacomandos2Comandos */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce AAsecomandos1Comandos */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce AAsecomandos2Comandos */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce AAsecomandos3Comandos */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AAsecomandos4Comandos */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AAavaliecomandos1Comandos */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AAavaliecomandos2Comandos */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list);
            }
            break;
            case 29: /* reduce AAavaliecomandos3Comandos */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list);
            }
            break;
            case 30: /* reduce AAavaliecomandos4Comandos */
            {
                ArrayList<Object> list = new30();
                push(goTo(8), list);
            }
            break;
            case 31: /* reduce AAenquantocomandos1Comandos */
            {
                ArrayList<Object> list = new31();
                push(goTo(8), list);
            }
            break;
            case 32: /* reduce AAenquantocomandos2Comandos */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list);
            }
            break;
            case 33: /* reduce AArepitacomandos1Comandos */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list);
            }
            break;
            case 34: /* reduce AArepitacomandos2Comandos */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list);
            }
            break;
            case 35: /* reduce APara$Acomando11Comandos */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list);
            }
            break;
            case 36: /* reduce APara$Acomando21Comandos */
            {
                ArrayList<Object> list = new36();
                push(goTo(8), list);
            }
            break;
            case 37: /* reduce APasso$Acomando11Comandos */
            {
                ArrayList<Object> list = new37();
                push(goTo(8), list);
            }
            break;
            case 38: /* reduce APasso$Acomando21Comandos */
            {
                ArrayList<Object> list = new38();
                push(goTo(8), list);
            }
            break;
            case 39: /* reduce AVarVirgVarVirg */
            {
                ArrayList<Object> list = new39();
                push(goTo(9), list);
            }
            break;
            case 40: /* reduce AVarVirgList */
            {
                ArrayList<Object> list = new40();
                push(goTo(10), list);
            }
            break;
            case 41: /* reduce AExpVirgExpVirg */
            {
                ArrayList<Object> list = new41();
                push(goTo(11), list);
            }
            break;
            case 42: /* reduce AElogicaVirgExpVirg */
            {
                ArrayList<Object> list = new42();
                push(goTo(11), list);
            }
            break;
            case 43: /* reduce AExpListExpList */
            {
                ArrayList<Object> list = new43();
                push(goTo(12), list);
            }
            break;
            case 44: /* reduce AExpVirgExpVirg1 */
            {
                ArrayList<Object> list = new44();
                push(goTo(13), list);
            }
            break;
            case 45: /* reduce AAcomando11SenaoComando */
            {
                ArrayList<Object> list = new45();
                push(goTo(14), list);
            }
            break;
            case 46: /* reduce AAcomando21SenaoComando */
            {
                ArrayList<Object> list = new46();
                push(goTo(14), list);
            }
            break;
            case 47: /* reduce AAcomando11SenaoComandoDoispontos */
            {
                ArrayList<Object> list = new47();
                push(goTo(15), list);
            }
            break;
            case 48: /* reduce AAcomando21SenaoComandoDoispontos */
            {
                ArrayList<Object> list = new48();
                push(goTo(15), list);
            }
            break;
            case 49: /* reduce AComandoCaso$Acomando11CasoComandos */
            {
                ArrayList<Object> list = new49();
                push(goTo(16), list);
            }
            break;
            case 50: /* reduce AComandoCaso$Acomando21CasoComandos */
            {
                ArrayList<Object> list = new50();
                push(goTo(16), list);
            }
            break;
            case 51: /* reduce ACasoComando */
            {
                ArrayList<Object> list = new51();
                push(goTo(17), list);
            }
            break;
            case 52: /* reduce AComandoPontoVirgComandoPontoVirg */
            {
                ArrayList<Object> list = new52();
                push(goTo(18), list);
            }
            break;
            case 53: /* reduce AComandoVirgulaComandoListVirg */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list);
            }
            break;
            case 54: /* reduce ASomaExp */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list);
            }
            break;
            case 55: /* reduce ASubtracaoExp */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list);
            }
            break;
            case 56: /* reduce ATermoExp */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list);
            }
            break;
            case 57: /* reduce AMultTermo */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list);
            }
            break;
            case 58: /* reduce ADivTermo */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list);
            }
            break;
            case 59: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new59();
                push(goTo(21), list);
            }
            break;
            case 60: /* reduce AValorFator */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list);
            }
            break;
            case 61: /* reduce AVarFator */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list);
            }
            break;
            case 62: /* reduce AFatorNegativoFator */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list);
            }
            break;
            case 63: /* reduce AExpFator */
            {
                ArrayList<Object> list = new63();
                push(goTo(22), list);
            }
            break;
            case 64: /* reduce AEExpLogica */
            {
                ArrayList<Object> list = new64();
                push(goTo(23), list);
            }
            break;
            case 65: /* reduce AOuExpLogica */
            {
                ArrayList<Object> list = new65();
                push(goTo(23), list);
            }
            break;
            case 66: /* reduce AXorExpLogica */
            {
                ArrayList<Object> list = new66();
                push(goTo(23), list);
            }
            break;
            case 67: /* reduce AExpLogicaTermoExpLogica */
            {
                ArrayList<Object> list = new67();
                push(goTo(23), list);
            }
            break;
            case 68: /* reduce ANaoElogicaExpLogicaTermo */
            {
                ArrayList<Object> list = new68();
                push(goTo(24), list);
            }
            break;
            case 69: /* reduce AExpLogicaFatorExpLogicaTermo */
            {
                ArrayList<Object> list = new69();
                push(goTo(24), list);
            }
            break;
            case 70: /* reduce AMenorigualExpLogicaFator */
            {
                ArrayList<Object> list = new70();
                push(goTo(25), list);
            }
            break;
            case 71: /* reduce AMaiorigualExpLogicaFator */
            {
                ArrayList<Object> list = new71();
                push(goTo(25), list);
            }
            break;
            case 72: /* reduce AMenorqExpLogicaFator */
            {
                ArrayList<Object> list = new72();
                push(goTo(25), list);
            }
            break;
            case 73: /* reduce AMaiorqExpLogicaFator */
            {
                ArrayList<Object> list = new73();
                push(goTo(25), list);
            }
            break;
            case 74: /* reduce AIgualExpLogicaFator */
            {
                ArrayList<Object> list = new74();
                push(goTo(25), list);
            }
            break;
            case 75: /* reduce ADiferenteExpLogicaFator */
            {
                ArrayList<Object> list = new75();
                push(goTo(25), list);
            }
            break;
            case 76: /* reduce AElogicaTermoParentesesExpLogicaFator */
            {
                ArrayList<Object> list = new76();
                push(goTo(25), list);
            }
            break;
            case 77: /* reduce AExpExpOuElogica */
            {
                ArrayList<Object> list = new77();
                push(goTo(26), list);
            }
            break;
            case 78: /* reduce AElogicaExpOuElogica */
            {
                ArrayList<Object> list = new78();
                push(goTo(26), list);
            }
            break;
            case 79: /* reduce ATerminal$VarList */
            {
                ArrayList<Object> list = new79();
                push(goTo(27), list);
            }
            break;
            case 80: /* reduce ANonTerminal$VarList */
            {
                ArrayList<Object> list = new80();
                push(goTo(27), list);
            }
            break;
            case 81: /* reduce ATerminal$Declaracoes */
            {
                ArrayList<Object> list = new81();
                push(goTo(28), list);
            }
            break;
            case 82: /* reduce ANonTerminal$Declaracoes */
            {
                ArrayList<Object> list = new82();
                push(goTo(28), list);
            }
            break;
            case 83: /* reduce ATerminal$Comandos */
            {
                ArrayList<Object> list = new83();
                push(goTo(29), list);
            }
            break;
            case 84: /* reduce ANonTerminal$Comandos */
            {
                ArrayList<Object> list = new84();
                push(goTo(29), list);
            }
            break;
            case 85: /* reduce ATerminal$ExpList */
            {
                ArrayList<Object> list = new85();
                push(goTo(30), list);
            }
            break;
            case 86: /* reduce ANonTerminal$ExpList */
            {
                ArrayList<Object> list = new86();
                push(goTo(30), list);
            }
            break;
            case 87: /* reduce ATerminal$ComandoList */
            {
                ArrayList<Object> list = new87();
                push(goTo(31), list);
            }
            break;
            case 88: /* reduce ANonTerminal$ComandoList */
            {
                ArrayList<Object> list = new88();
                push(goTo(31), list);
            }
            break;
            case 89: /* reduce ATerminal$VarVirg */
            {
                ArrayList<Object> list = new89();
                push(goTo(32), list);
            }
            break;
            case 90: /* reduce ANonTerminal$VarVirg */
            {
                ArrayList<Object> list = new90();
                push(goTo(32), list);
            }
            break;
            case 91: /* reduce ATerminal$CasoComandos */
            {
                ArrayList<Object> list = new91();
                push(goTo(33), list);
            }
            break;
            case 92: /* reduce ANonTerminal$CasoComandos */
            {
                ArrayList<Object> list = new92();
                push(goTo(33), list);
            }
            break;
            case 93: /* reduce ATerminal$ComandoPontoVirg */
            {
                ArrayList<Object> list = new93();
                push(goTo(34), list);
            }
            break;
            case 94: /* reduce ANonTerminal$ComandoPontoVirg */
            {
                ArrayList<Object> list = new94();
                push(goTo(34), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAcomando11Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        PComando pcomandoNode3;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }

        pcomandoNode3 = new AComando(listNode4);
        }

        pstartNode1 = new AStart(pdeclaracaoNode2, pcomandoNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAcomando21Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        PComando pcomandoNode3;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcomandoNode3 = new AComando(listNode5);
        }

        pstartNode1 = new AStart(pdeclaracaoNode2, pcomandoNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAtipodeclaracoes1Declaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracoes pdeclaracoesNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PVar pvarNode4;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        }
        pvarNode4 = (PVar)nodeArrayList3.get(0);

        pdeclaracoesNode1 = new ATipoDeclaracoes(ptipoNode2, listNode3, pvarNode4);
        }
	nodeList.add(pdeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAtipodeclaracoes2Declaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracoes pdeclaracoesNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PVar pvarNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pvarNode5 = (PVar)nodeArrayList4.get(0);

        pdeclaracoesNode1 = new ATipoDeclaracoes(ptipoNode2, listNode4, pvarNode5);
        }
	nodeList.add(pdeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AConstDeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracoes pdeclaracoesNode1;
        {
            // Block
        TId tidNode2;
        PValor pvalorNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList3.get(0);

        pdeclaracoesNode1 = new AConstDeclaracoes(tidNode2, pvalorNode3);
        }
	nodeList.add(pdeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pdeclaracaoNode1 = new ADeclaracao(listNode2);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAdeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdeclaracaoNode1 = new ADeclaracao(listNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIntTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AIntTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ACharTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACharTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ABooleanoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TBooleano tbooleanoNode2;
        tbooleanoNode2 = (TBooleano)nodeArrayList1.get(0);

        ptipoNode1 = new ABooleanoTipo(tbooleanoNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVarList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIndexVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TNum tnumNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tnumNode3 = (TNum)nodeArrayList3.get(0);

        pvarNode1 = new AIndexVar(tidNode2, tnumNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AStrValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStrValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANumValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pvalorNode1 = new ANumValor(tnumNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ANumrealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumreal tnumrealNode2;
        tnumrealNode2 = (TNumreal)nodeArrayList1.get(0);

        pvalorNode1 = new ANumrealValor(tnumrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AComandoListComandoList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        pcomandosNode1 = (PComandos)nodeArrayList1.get(0);
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAtribComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandosNode1 = new AAtribComandos(pvarNode2, pexpNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAleiacomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PVar pvarNode3;
        {
            // Block
        }
        pvarNode3 = (PVar)nodeArrayList3.get(0);

        pcomandosNode1 = new ALeiaComandos(listNode2, pvarNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAleiacomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PVar pvarNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pvarNode4 = (PVar)nodeArrayList4.get(0);

        pcomandosNode1 = new ALeiaComandos(listNode3, pvarNode4);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAescrevacomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        {
            // Block
        }
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandosNode1 = new AEscrevaComandos(listNode2, pexpNode3);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAescrevacomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList4.get(0);

        pcomandosNode1 = new AEscrevaComandos(listNode3, pexpNode4);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAsecomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComandos pcomandosNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        }
        pcomandosNode4 = (PComandos)nodeArrayList6.get(0);

        pcomandosNode1 = new ASeComandos(pexplogicaNode2, listNode3, pcomandosNode4, null);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAsecomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PComandos pcomandosNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcomandosNode5 = (PComandos)nodeArrayList7.get(0);

        pcomandosNode1 = new ASeComandos(pexplogicaNode2, listNode4, pcomandosNode5, null);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAsecomandos3Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComandos pcomandosNode4;
        PSenaoComando psenaocomandoNode5;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        }
        pcomandosNode4 = (PComandos)nodeArrayList6.get(0);
        psenaocomandoNode5 = (PSenaoComando)nodeArrayList7.get(0);

        pcomandosNode1 = new ASeComandos(pexplogicaNode2, listNode3, pcomandosNode4, psenaocomandoNode5);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAsecomandos4Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PComandos pcomandosNode5;
        PSenaoComando psenaocomandoNode6;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcomandosNode5 = (PComandos)nodeArrayList7.get(0);
        psenaocomandoNode6 = (PSenaoComando)nodeArrayList8.get(0);

        pcomandosNode1 = new ASeComandos(pexplogicaNode2, listNode4, pcomandosNode5, psenaocomandoNode6);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAavaliecomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExp pexpNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpNode2, null, null);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAavaliecomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExp pexpNode2;
        PCasoComando pcasocomandoNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcasocomandoNode3 = (PCasoComando)nodeArrayList5.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpNode2, pcasocomandoNode3, null);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAavaliecomandos3Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExp pexpNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PSenaoComandoDoispontos psenaocomandodoispontosNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        psenaocomandodoispontosNode4 = (PSenaoComandoDoispontos)nodeArrayList5.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpNode2, null, psenaocomandodoispontosNode4);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAavaliecomandos4Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExp pexpNode2;
        PCasoComando pcasocomandoNode3;
        PSenaoComandoDoispontos psenaocomandodoispontosNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcasocomandoNode3 = (PCasoComando)nodeArrayList5.get(0);
        psenaocomandodoispontosNode4 = (PSenaoComandoDoispontos)nodeArrayList6.get(0);

        pcomandosNode1 = new AAvalieComandos(pexpNode2, pcasocomandoNode3, psenaocomandodoispontosNode4);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAenquantocomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComandos pcomandosNode4;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        }
        pcomandosNode4 = (PComandos)nodeArrayList6.get(0);

        pcomandosNode1 = new AEnquantoComandos(pexplogicaNode2, listNode3, pcomandosNode4);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAenquantocomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PComandos pcomandosNode5;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcomandosNode5 = (PComandos)nodeArrayList7.get(0);

        pcomandosNode1 = new AEnquantoComandos(pexplogicaNode2, listNode4, pcomandosNode5);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AArepitacomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PComandos pcomandosNode3;
        PExpLogica pexplogicaNode4;
        {
            // Block
        }
        pcomandosNode3 = (PComandos)nodeArrayList2.get(0);
        pexplogicaNode4 = (PExpLogica)nodeArrayList5.get(0);

        pcomandosNode1 = new ARepitaComandos(listNode2, pcomandosNode3, pexplogicaNode4);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AArepitacomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComandos pcomandosNode4;
        PExpLogica pexplogicaNode5;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pcomandosNode4 = (PComandos)nodeArrayList3.get(0);
        pexplogicaNode5 = (PExpLogica)nodeArrayList6.get(0);

        pcomandosNode1 = new ARepitaComandos(listNode3, pcomandosNode4, pexplogicaNode5);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce APara$Acomando11Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVar pvarNode2;
        PValor pvalorNode3;
        PValor pvalorNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList4.get(0);
        pvalorNode4 = (PValor)nodeArrayList6.get(0);
        {
            // Block
        PComandos pcomandosNode5;
        pcomandosNode5 = (PComandos)nodeArrayList8.get(0);
	if(pcomandosNode5 != null)
	{
	  listNode6.add(pcomandosNode5);
	}
        }

        pcomandosNode1 = new AParaComandos(pvarNode2, pvalorNode3, pvalorNode4, listNode6);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce APara$Acomando21Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVar pvarNode2;
        PValor pvalorNode3;
        PValor pvalorNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList4.get(0);
        pvalorNode4 = (PValor)nodeArrayList6.get(0);
        {
            // Block
        PComandos pcomandosNode5;
        pcomandosNode5 = (PComandos)nodeArrayList9.get(0);
	if(pcomandosNode5 != null)
	{
	  listNode6.add(pcomandosNode5);
	}
        }

        pcomandosNode1 = new AParaComandos(pvarNode2, pvalorNode3, pvalorNode4, listNode6);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce APasso$Acomando11Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVar pvarNode2;
        PValor pvalorNode3;
        PValor pvalorNode4;
        PValor pvalorNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList4.get(0);
        pvalorNode4 = (PValor)nodeArrayList6.get(0);
        pvalorNode5 = (PValor)nodeArrayList8.get(0);
        {
            // Block
        PComandos pcomandosNode6;
        pcomandosNode6 = (PComandos)nodeArrayList10.get(0);
	if(pcomandosNode6 != null)
	{
	  listNode7.add(pcomandosNode6);
	}
        }

        pcomandosNode1 = new APassoComandos(pvarNode2, pvalorNode3, pvalorNode4, pvalorNode5, listNode7);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce APasso$Acomando21Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PVar pvarNode2;
        PValor pvalorNode3;
        PValor pvalorNode4;
        PValor pvalorNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList4.get(0);
        pvalorNode4 = (PValor)nodeArrayList6.get(0);
        pvalorNode5 = (PValor)nodeArrayList8.get(0);
        {
            // Block
        PComandos pcomandosNode6;
        pcomandosNode6 = (PComandos)nodeArrayList11.get(0);
	if(pcomandosNode6 != null)
	{
	  listNode7.add(pcomandosNode6);
	}
        }

        pcomandosNode1 = new APassoComandos(pvarNode2, pvalorNode3, pvalorNode4, pvalorNode5, listNode7);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AVarVirgVarVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AVarVirgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExpVirgExpVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AElogicaVirgExpVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpListExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpVirgExpVirg1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAcomando11SenaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoComando psenaocomandoNode1;
        {
            // Block
        TSenao tsenaoNode2;
        PComando pcomandoNode3;
        PComandos pcomandosNode5;
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }

        pcomandoNode3 = new AComando(listNode4);
        }
        pcomandosNode5 = (PComandos)nodeArrayList2.get(0);

        psenaocomandoNode1 = new ASenaoComando(tsenaoNode2, pcomandoNode3, pcomandosNode5);
        }
	nodeList.add(psenaocomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAcomando21SenaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoComando psenaocomandoNode1;
        {
            // Block
        TSenao tsenaoNode2;
        PComando pcomandoNode3;
        PComandos pcomandosNode6;
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcomandoNode3 = new AComando(listNode5);
        }
        pcomandosNode6 = (PComandos)nodeArrayList3.get(0);

        psenaocomandoNode1 = new ASenaoComando(tsenaoNode2, pcomandoNode3, pcomandosNode6);
        }
	nodeList.add(psenaocomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAcomando11SenaoComandoDoispontos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoComandoDoispontos psenaocomandodoispontosNode1;
        {
            // Block
        TSenao tsenaoNode2;
        TDoisPontos tdoispontosNode3;
        PComando pcomandoNode4;
        PComandos pcomandosNode6;
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }

        pcomandoNode4 = new AComando(listNode5);
        }
        pcomandosNode6 = (PComandos)nodeArrayList3.get(0);

        psenaocomandodoispontosNode1 = new ASenaoComandoDoispontos(tsenaoNode2, tdoispontosNode3, pcomandoNode4, pcomandosNode6);
        }
	nodeList.add(psenaocomandodoispontosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAcomando21SenaoComandoDoispontos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoComandoDoispontos psenaocomandodoispontosNode1;
        {
            // Block
        TSenao tsenaoNode2;
        TDoisPontos tdoispontosNode3;
        PComando pcomandoNode4;
        PComandos pcomandosNode7;
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcomandoNode4 = new AComando(listNode6);
        }
        pcomandosNode7 = (PComandos)nodeArrayList4.get(0);

        psenaocomandodoispontosNode1 = new ASenaoComandoDoispontos(tsenaoNode2, tdoispontosNode3, pcomandoNode4, pcomandosNode7);
        }
	nodeList.add(psenaocomandodoispontosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AComandoCaso$Acomando11CasoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoComandos pcasocomandosNode1;
        {
            // Block
        TCaso tcasoNode2;
        PValor pvalorNode3;
        TDoisPontos tdoispontosNode4;
        PComando pcomandoNode5;
        PComandos pcomandosNode7;
        tcasoNode2 = (TCaso)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        tdoispontosNode4 = (TDoisPontos)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }

        pcomandoNode5 = new AComando(listNode6);
        }
        pcomandosNode7 = (PComandos)nodeArrayList4.get(0);

        pcasocomandosNode1 = new AComandoCasoCasoComandos(tcasoNode2, pvalorNode3, tdoispontosNode4, pcomandoNode5, pcomandosNode7);
        }
	nodeList.add(pcasocomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AComandoCaso$Acomando21CasoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoComandos pcasocomandosNode1;
        {
            // Block
        TCaso tcasoNode2;
        PValor pvalorNode3;
        TDoisPontos tdoispontosNode4;
        PComando pcomandoNode5;
        PComandos pcomandosNode8;
        tcasoNode2 = (TCaso)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        tdoispontosNode4 = (TDoisPontos)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pcomandoNode5 = new AComando(listNode7);
        }
        pcomandosNode8 = (PComandos)nodeArrayList5.get(0);

        pcasocomandosNode1 = new AComandoCasoCasoComandos(tcasoNode2, pvalorNode3, tdoispontosNode4, pcomandoNode5, pcomandosNode8);
        }
	nodeList.add(pcasocomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ACasoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoComando pcasocomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcasocomandoNode1 = new ACasoComando(listNode3);
        }
	nodeList.add(pcasocomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AComandoPontoVirgComandoPontoVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AComandoVirgulaComandoListVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ASomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ASubtracaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASubtracaoExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ATermoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ADivTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AValorFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValorExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AVarFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpNode1 = new AVarExp(pvarNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AFatorNegativoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TMenos tmenosNode2;
        PExp pexpNode3;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AFatorNegativoExp(tmenosNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AEExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AEExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOuExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AXorExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AXorExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AExpLogicaTermoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANaoElogicaExpLogicaTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new ANaoElogicaExpLogica(pexplogicaNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AExpLogicaFatorExpLogicaTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AMenorigualExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMenorigualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AMaiorigualExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMaiorigualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AMenorqExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMenorqExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AMaiorqExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMaiorqExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AIgualExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AIgualExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ADiferenteExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new ADiferenteExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AElogicaTermoParentesesExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList2.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AExpExpOuElogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpOuElogica pexpouelogicaNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpouelogicaNode1 = new AExpExpOuElogica(pexpNode2);
        }
	nodeList.add(pexpouelogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AElogicaExpOuElogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpOuElogica pexpouelogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);

        pexpouelogicaNode1 = new AElogicaExpOuElogica(pexplogicaNode2);
        }
	nodeList.add(pexpouelogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ATerminal$VarList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANonTerminal$VarList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarNode2 = (PVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$Declaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracoes pdeclaracoesNode1;
        pdeclaracoesNode1 = (PDeclaracoes)nodeArrayList1.get(0);
	if(pdeclaracoesNode1 != null)
	{
	  listNode2.add(pdeclaracoesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$Declaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracoes pdeclaracoesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracoesNode2 = (PDeclaracoes)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracoesNode2 != null)
	{
	  listNode3.add(pdeclaracoesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandos pcomandosNode1;
        pcomandosNode1 = (PComandos)nodeArrayList1.get(0);
	if(pcomandosNode1 != null)
	{
	  listNode2.add(pcomandosNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComandos pcomandosNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandosNode2 = (PComandos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandosNode2 != null)
	{
	  listNode3.add(pcomandosNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$ExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$ExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATerminal$ComandoList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandos pcomandosNode1;
        pcomandosNode1 = (PComandos)nodeArrayList1.get(0);
	if(pcomandosNode1 != null)
	{
	  listNode2.add(pcomandosNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANonTerminal$ComandoList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComandos pcomandosNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandosNode2 = (PComandos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandosNode2 != null)
	{
	  listNode3.add(pcomandosNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ATerminal$VarVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ANonTerminal$VarVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ATerminal$CasoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCasoComandos pcasocomandosNode1;
        pcasocomandosNode1 = (PCasoComandos)nodeArrayList1.get(0);
	if(pcasocomandosNode1 != null)
	{
	  listNode2.add(pcasocomandosNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANonTerminal$CasoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCasoComandos pcasocomandosNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcasocomandosNode2 = (PCasoComandos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcasocomandosNode2 != null)
	{
	  listNode3.add(pcasocomandosNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ATerminal$ComandoPontoVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ANonTerminal$ComandoPontoVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {32, SHIFT, 3}, },
			{{-1, ERROR, 2}, {60, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, },
			{{-1, REDUCE, 5}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 9}, {32, SHIFT, 14}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 11}, {2, SHIFT, 15}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 12}, {39, SHIFT, 27}, },
			{{-1, REDUCE, 6}, {23, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 7}, {26, SHIFT, 8}, {27, SHIFT, 9}, },
			{{-1, ERROR, 14}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 16}, {42, SHIFT, 33}, },
			{{-1, ERROR, 17}, {42, SHIFT, 34}, },
			{{-1, ERROR, 18}, {32, SHIFT, 23}, },
			{{-1, ERROR, 19}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 20}, {42, SHIFT, 39}, },
			{{-1, ERROR, 21}, {42, SHIFT, 40}, },
			{{-1, ERROR, 22}, {42, SHIFT, 41}, },
			{{-1, REDUCE, 12}, {44, SHIFT, 42}, },
			{{-1, ERROR, 24}, {59, SHIFT, 43}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 26}, {2, SHIFT, 44}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 27}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 32}, {40, SHIFT, 49}, },
			{{-1, ERROR, 33}, {28, SHIFT, 50}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 51}, {49, SHIFT, 52}, },
			{{-1, ERROR, 34}, {28, SHIFT, 50}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 51}, {49, SHIFT, 52}, },
			{{-1, ERROR, 35}, {12, SHIFT, 62}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 17}, {15, SHIFT, 63}, },
			{{-1, ERROR, 38}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 39}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 40}, {32, SHIFT, 23}, },
			{{-1, ERROR, 41}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 42}, {34, SHIFT, 73}, },
			{{-1, ERROR, 43}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 47}, {40, SHIFT, 75}, {41, SHIFT, 76}, },
			{{-1, ERROR, 48}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 50}, {28, SHIFT, 50}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 51}, {49, SHIFT, 52}, },
			{{-1, ERROR, 51}, {28, SHIFT, 50}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 51}, {49, SHIFT, 52}, },
			{{-1, ERROR, 52}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 55}, {48, SHIFT, 83}, {49, SHIFT, 84}, {53, SHIFT, 85}, {54, SHIFT, 86}, {55, SHIFT, 87}, {56, SHIFT, 88}, {57, SHIFT, 89}, {58, SHIFT, 90}, },
			{{-1, REDUCE, 56}, {50, SHIFT, 91}, {51, SHIFT, 92}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 58}, {29, SHIFT, 93}, {30, SHIFT, 94}, {31, SHIFT, 95}, {43, SHIFT, 96}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 61}, {29, SHIFT, 93}, {30, SHIFT, 94}, {31, SHIFT, 95}, {43, SHIFT, 97}, },
			{{-1, ERROR, 62}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, },
			{{-1, ERROR, 63}, {42, SHIFT, 99}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 17}, {15, SHIFT, 100}, },
			{{-1, ERROR, 66}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 67}, {43, SHIFT, 102}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, ERROR, 68}, {41, SHIFT, 76}, {43, SHIFT, 103}, },
			{{-1, ERROR, 69}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 71}, {41, SHIFT, 105}, {43, SHIFT, 106}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, ERROR, 72}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 73}, {45, SHIFT, 109}, },
			{{-1, ERROR, 74}, {40, SHIFT, 110}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 78}, {40, SHIFT, 111}, {41, SHIFT, 76}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 80}, {43, SHIFT, 112}, {48, SHIFT, 83}, {49, SHIFT, 84}, {53, SHIFT, 85}, {54, SHIFT, 86}, {55, SHIFT, 87}, {56, SHIFT, 88}, {57, SHIFT, 89}, {58, SHIFT, 90}, },
			{{-1, ERROR, 81}, {29, SHIFT, 93}, {30, SHIFT, 94}, {31, SHIFT, 95}, {43, SHIFT, 113}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 83}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 84}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 85}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 86}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 87}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 88}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 89}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 90}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 91}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 92}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 66}, {49, SHIFT, 52}, },
			{{-1, ERROR, 93}, {28, SHIFT, 50}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 51}, {49, SHIFT, 52}, },
			{{-1, ERROR, 94}, {28, SHIFT, 50}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 51}, {49, SHIFT, 52}, },
			{{-1, ERROR, 95}, {28, SHIFT, 50}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 51}, {49, SHIFT, 52}, },
			{{-1, ERROR, 96}, {4, SHIFT, 127}, },
			{{-1, ERROR, 97}, {8, SHIFT, 128}, },
			{{-1, ERROR, 98}, {11, SHIFT, 129}, {15, SHIFT, 130}, },
			{{-1, ERROR, 99}, {28, SHIFT, 50}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 51}, {49, SHIFT, 52}, },
			{{-1, ERROR, 100}, {42, SHIFT, 132}, },
			{{-1, ERROR, 101}, {43, SHIFT, 112}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, ERROR, 102}, {5, SHIFT, 133}, {17, SHIFT, 134}, {18, SHIFT, 135}, },
			{{-1, ERROR, 103}, {40, SHIFT, 140}, },
			{{-1, ERROR, 104}, {41, SHIFT, 76}, {43, SHIFT, 141}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 106}, {40, SHIFT, 142}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 108}, {41, SHIFT, 105}, {43, SHIFT, 143}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 54}, {50, SHIFT, 91}, {51, SHIFT, 92}, },
			{{-1, REDUCE, 55}, {50, SHIFT, 91}, {51, SHIFT, 92}, },
			{{-1, REDUCE, 73}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, REDUCE, 72}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, REDUCE, 70}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, REDUCE, 71}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, REDUCE, 74}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, REDUCE, 75}, {48, SHIFT, 83}, {49, SHIFT, 84}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 127}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 128}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 129}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, },
			{{-1, ERROR, 130}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, },
			{{-1, ERROR, 131}, {29, SHIFT, 93}, {30, SHIFT, 94}, {31, SHIFT, 95}, {43, SHIFT, 150}, },
			{{-1, ERROR, 132}, {28, SHIFT, 50}, {32, SHIFT, 23}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, {42, SHIFT, 51}, {49, SHIFT, 52}, },
			{{-1, ERROR, 133}, {39, SHIFT, 152}, },
			{{-1, ERROR, 134}, {40, SHIFT, 153}, },
			{{-1, ERROR, 135}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, },
			{{-1, ERROR, 136}, {17, SHIFT, 155}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 138}, {5, SHIFT, 133}, {17, SHIFT, 156}, },
			{{-1, REDUCE, 51}, {18, SHIFT, 135}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 141}, {40, SHIFT, 159}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 143}, {40, SHIFT, 160}, },
			{{-1, REDUCE, 17}, {5, SHIFT, 161}, {6, SHIFT, 162}, },
			{{-1, ERROR, 145}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 17}, {9, SHIFT, 165}, },
			{{-1, ERROR, 147}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 148}, {15, SHIFT, 167}, },
			{{-1, ERROR, 149}, {8, SHIFT, 168}, },
			{{-1, ERROR, 150}, {40, SHIFT, 169}, },
			{{-1, ERROR, 151}, {29, SHIFT, 93}, {30, SHIFT, 94}, {31, SHIFT, 95}, {43, SHIFT, 170}, },
			{{-1, ERROR, 152}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 154}, {39, SHIFT, 173}, },
			{{-1, ERROR, 155}, {40, SHIFT, 174}, },
			{{-1, ERROR, 156}, {40, SHIFT, 175}, },
			{{-1, ERROR, 157}, {17, SHIFT, 176}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 161}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 162}, {40, SHIFT, 179}, },
			{{-1, ERROR, 163}, {6, SHIFT, 180}, },
			{{-1, REDUCE, 17}, {5, SHIFT, 161}, {6, SHIFT, 181}, },
			{{-1, ERROR, 165}, {40, SHIFT, 183}, },
			{{-1, REDUCE, 17}, {9, SHIFT, 184}, },
			{{-1, ERROR, 167}, {33, SHIFT, 29}, {34, SHIFT, 30}, {35, SHIFT, 31}, },
			{{-1, ERROR, 168}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 170}, {40, SHIFT, 188}, },
			{{-1, REDUCE, 83}, {17, REDUCE, 47}, },
			{{-1, ERROR, 172}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 173}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 176}, {40, SHIFT, 192}, },
			{{-1, REDUCE, 83}, {6, REDUCE, 45}, },
			{{-1, ERROR, 178}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 180}, {40, SHIFT, 194}, },
			{{-1, ERROR, 181}, {40, SHIFT, 195}, },
			{{-1, ERROR, 182}, {6, SHIFT, 196}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 184}, {40, SHIFT, 197}, },
			{{-1, ERROR, 185}, {8, SHIFT, 198}, },
			{{-1, REDUCE, 83}, {13, SHIFT, 199}, },
			{{-1, ERROR, 187}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 84}, {17, REDUCE, 48}, },
			{{-1, REDUCE, 83}, {5, REDUCE, 49}, {17, REDUCE, 49}, {18, REDUCE, 49}, },
			{{-1, ERROR, 191}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 84}, {6, REDUCE, 46}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 196}, {40, SHIFT, 202}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 198}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, ERROR, 199}, {40, SHIFT, 205}, },
			{{-1, REDUCE, 84}, {13, SHIFT, 206}, },
			{{-1, REDUCE, 84}, {5, REDUCE, 50}, {17, REDUCE, 50}, {18, REDUCE, 50}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 83}, {13, SHIFT, 207}, },
			{{-1, ERROR, 204}, {3, SHIFT, 16}, {7, SHIFT, 17}, {10, SHIFT, 18}, {14, SHIFT, 19}, {16, SHIFT, 20}, {21, SHIFT, 21}, {22, SHIFT, 22}, {32, SHIFT, 23}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 206}, {40, SHIFT, 209}, },
			{{-1, ERROR, 207}, {40, SHIFT, 210}, },
			{{-1, REDUCE, 84}, {13, SHIFT, 211}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 211}, {40, SHIFT, 212}, },
			{{-1, REDUCE, 38}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 10}, {13, 28}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 46}, {48, 77}, {69, 77}, },
			{{-1, 53}, {11, 24}, {18, 35}, {19, 24}, {26, 24}, {27, 47}, {38, 24}, {40, 68}, {48, 78}, {69, 104}, {127, 24}, {128, 24}, {145, 24}, {147, 24}, {152, 24}, {161, 24}, {168, 24}, {172, 24}, {173, 24}, {178, 24}, {187, 24}, {191, 24}, {198, 24}, {204, 24}, },
			{{-1, 54}, {14, 32}, {62, 98}, {129, 148}, {130, 149}, {135, 154}, {167, 185}, },
			{{-1, 36}, {38, 64}, {145, 64}, {147, 64}, },
			{{-1, 25}, {19, 37}, {26, 45}, {38, 65}, {127, 144}, {128, 146}, {145, 164}, {147, 166}, {152, 171}, {161, 177}, {168, 186}, {172, 189}, {173, 190}, {178, 193}, {187, 200}, {191, 201}, {198, 203}, {204, 208}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 70}, {72, 107}, },
			{{-1, -1}, },
			{{-1, 163}, {164, 182}, },
			{{-1, 136}, {138, 157}, },
			{{-1, 137}, {139, 158}, },
			{{-1, 138}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 55}, {39, 67}, {41, 71}, {43, 74}, {51, 80}, {66, 101}, {72, 108}, {85, 116}, {86, 117}, {87, 118}, {88, 119}, {89, 120}, {90, 121}, },
			{{-1, 56}, {83, 114}, {84, 115}, },
			{{-1, 57}, {52, 82}, {91, 122}, {92, 123}, },
			{{-1, 58}, {34, 61}, {51, 81}, {99, 131}, {132, 151}, },
			{{-1, 59}, {50, 79}, {93, 124}, {94, 125}, {95, 126}, },
			{{-1, 60}, },
			{{-1, -1}, },
			{{-1, 48}, {40, 69}, },
			{{-1, 13}, },
			{{-1, 26}, {152, 172}, {161, 178}, {168, 187}, {173, 191}, {198, 204}, },
			{{-1, 72}, },
			{{-1, 38}, {127, 145}, {128, 147}, },
			{{-1, -1}, },
			{{-1, 139}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim.', 'se', 'enquanto', 'para', 'repita', 'avalie', 'leia', 'escreva', 'inteiro', 'caractere', 'real', 'booleano', 'const', id",
			"expecting: ':'",
			"expecting: 'fim.', 'se', 'enquanto', 'para', 'repita', 'avalie', 'leia', 'escreva', id",
			"expecting: string, num, numreal",
			"expecting: '('",
			"expecting: 'se', 'enquanto', 'para', 'repita', 'avalie', 'leia', 'escreva', id",
			"expecting: 'de', 'e', 'ou', 'xor', ';', ',', ')', '[', '+', '-', '*', '/', '>', '<', '<=', '>=', '=', '<>', ':='",
			"expecting: ':='",
			"expecting: 'faca', 'passo', 'ate', 'e', 'ou', 'xor', ':', ';', ',', ')', '+', '-', '*', '/', '>', '<', '<=', '>=', '=', '<>'",
			"expecting: ';'",
			"expecting: 'nao', id, string, num, numreal, '(', '-'",
			"expecting: 'de'",
			"expecting: 'se', 'enquanto', 'para', 'repita', 'ate', 'avalie', 'leia', 'escreva', id",
			"expecting: id, string, num, numreal, '(', '-'",
			"expecting: num",
			"expecting: ';', ','",
			"expecting: 'e', 'ou', 'xor', ';', ',', ')', '+', '-', '*', '/', '>', '<', '<=', '>=', '=', '<>'",
			"expecting: '+', '-', '>', '<', '<=', '>=', '=', '<>'",
			"expecting: 'e', 'ou', 'xor', ')'",
			"expecting: ')', '+', '-'",
			"expecting: ',', ')'",
			"expecting: ',', ')', '+', '-'",
			"expecting: ']'",
			"expecting: ';', '+', '-'",
			"expecting: ')', '+', '-', '>', '<', '<=', '>=', '=', '<>'",
			"expecting: 'entao'",
			"expecting: 'faca'",
			"expecting: 'passo', 'ate'",
			"expecting: 'senao', 'fim avalie', 'caso'",
			"expecting: 'de', 'e', 'ou', 'xor', ';', ',', ')', '+', '-', '*', '/', '>', '<', '<=', '>=', '=', '<>', ':='",
			"expecting: 'fim.', 'se', 'senao', 'fim se', 'enquanto', 'fim enquanto', 'para', 'fim para', 'repita', 'ate', 'avalie', 'fim avalie', 'caso', 'leia', 'escreva', id",
			"expecting: 'e', 'ou', 'xor', ')', '+', '-'",
			"expecting: 'fim avalie'",
			"expecting: 'senao', 'fim avalie'",
			"expecting: 'se', 'senao', 'fim se', 'enquanto', 'para', 'repita', 'avalie', 'leia', 'escreva', id",
			"expecting: 'se', 'enquanto', 'fim enquanto', 'para', 'repita', 'avalie', 'leia', 'escreva', id",
			"expecting: 'ate'",
			"expecting: 'fim se'",
			"expecting: 'se', 'enquanto', 'para', 'repita', 'avalie', 'fim avalie', 'leia', 'escreva', id",
			"expecting: 'se', 'fim se', 'enquanto', 'para', 'repita', 'avalie', 'leia', 'escreva', id",
			"expecting: 'se', 'enquanto', 'para', 'fim para', 'repita', 'avalie', 'leia', 'escreva', id",
			"expecting: 'se', 'senao', 'enquanto', 'para', 'repita', 'avalie', 'fim avalie', 'caso', 'leia', 'escreva', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 5, 5, 1, 4, 6, 5, 4, 7, 2, 8, 8, 1, 9, 8, 8, 8, 10, 11, 6, 6, 1, 4, 12, 12, 12, 13, 14, 14, 15, 9, 16, 9, 17, 1, 17, 18, 17, 2, 6, 1, 19, 1, 4, 14, 14, 17, 20, 20, 21, 20, 20, 22, 22, 22, 22, 7, 8, 9, 16, 17, 23, 24, 1, 17, 25, 17, 26, 27, 4, 1, 1, 19, 22, 28, 22, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14, 14, 14, 29, 30, 31, 14, 8, 23, 32, 13, 24, 17, 13, 17, 25, 33, 34, 4, 20, 22, 20, 20, 35, 35, 35, 35, 35, 35, 20, 20, 22, 22, 22, 9, 9, 7, 7, 22, 14, 5, 13, 7, 36, 32, 37, 32, 34, 13, 34, 13, 38, 9, 39, 9, 40, 30, 13, 22, 9, 34, 5, 13, 13, 36, 32, 34, 34, 9, 13, 41, 38, 13, 39, 7, 9, 34, 13, 42, 9, 9, 34, 34, 13, 43, 9, 34, 13, 13, 41, 34, 13, 30, 44, 9, 34, 42, 45, 9, 34, 43, 34, 34, 13, 34, 9, 13, 44, 45, 34, 44, 9, 34, 13, 13, 44, 34, 34, 13, 34, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
