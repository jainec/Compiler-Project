/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladores.node;

import java.util.*;
import compiladores.analysis.*;

@SuppressWarnings("nls")
public final class APassoComandos extends PComandos
{
    private PVar _var_;
    private PValor _a_;
    private PValor _b_;
    private PValor _c_;
    private final LinkedList<PComandos> _comandos_ = new LinkedList<PComandos>();

    public APassoComandos()
    {
        // Constructor
    }

    public APassoComandos(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") PValor _a_,
        @SuppressWarnings("hiding") PValor _b_,
        @SuppressWarnings("hiding") PValor _c_,
        @SuppressWarnings("hiding") List<?> _comandos_)
    {
        // Constructor
        setVar(_var_);

        setA(_a_);

        setB(_b_);

        setC(_c_);

        setComandos(_comandos_);

    }

    @Override
    public Object clone()
    {
        return new APassoComandos(
            cloneNode(this._var_),
            cloneNode(this._a_),
            cloneNode(this._b_),
            cloneNode(this._c_),
            cloneList(this._comandos_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPassoComandos(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public PValor getA()
    {
        return this._a_;
    }

    public void setA(PValor node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PValor getB()
    {
        return this._b_;
    }

    public void setB(PValor node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    public PValor getC()
    {
        return this._c_;
    }

    public void setC(PValor node)
    {
        if(this._c_ != null)
        {
            this._c_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c_ = node;
    }

    public LinkedList<PComandos> getComandos()
    {
        return this._comandos_;
    }

    public void setComandos(List<?> list)
    {
        for(PComandos e : this._comandos_)
        {
            e.parent(null);
        }
        this._comandos_.clear();

        for(Object obj_e : list)
        {
            PComandos e = (PComandos) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comandos_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._a_)
            + toString(this._b_)
            + toString(this._c_)
            + toString(this._comandos_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        if(this._c_ == child)
        {
            this._c_ = null;
            return;
        }

        if(this._comandos_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((PValor) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((PValor) newChild);
            return;
        }

        if(this._c_ == oldChild)
        {
            setC((PValor) newChild);
            return;
        }

        for(ListIterator<PComandos> i = this._comandos_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComandos) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
